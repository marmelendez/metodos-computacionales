% 3. Write a predicate head/2 which takes a list as its first argument and returns the head of the list as its second argument. It should fail if there is no first element.

head([],_):-
    fail.

head([First|_], R):-
    R is First.
    
% 5. Write a predicate last/2 which takes a list as its first argument and returns the last element of the list. 

last([],_).
last([X], X).

last([_|Last], R):-
    last(Last, R1),
    R is R1.
    
% 6. Write a predicate max/3which takes three arguments, the first two are positive integer numbers and returns in the third the max ofthem.

max(X, Y, R) :-
    X > Y -> R is X; 
    R is Y.
    
% 7. Write a predicate fact/2which takes a natural number as first argument, and returns the factorial of the number.

fact(0, 1).
fact(1, 1).

fact(N, R) :-
    N > 0,
    N_1 is N - 1,
    fact(N_1, R_1),
    R is R_1 * N.
   
% 8. Write a predicate fib/2 which takes a natural number as first argument, and returns the value of the Fibonacci sequence for that position (counting from 1).

fib(0, 0).
fib(1, 1).
fib(2, 1).

fib(F,R) :- 
    F1 is F - 1, 
    F2 is F - 2,
    fib(F1, R1), 
    fib(F2, R2),
    R is R1 + R2.
    
% 9. Write a predicate length2/2 which takes a list as first argument, and returns in the second one the number of elements in the list.

length2([], 0).
length2([_|List], R) :- 
    length2(List, L), 
    R is L + 1.
    
%10. Write a predicate power/3 which takes a number as first argument, a natural number as second argument and returns the first number to the power of the second.

power(0, 0, _):-
    print(error),
	fail.

power(X, 0, 1):-
    X =\= 0.

power(X, Y, Z):-
    Y >= 2, 
    Y_1 is Y - 1,
    power(X, Y_1, Z_1),
    Z is X * Z_1.
    
Metodo 2:
power(_, 0, 1).

power(X, Y, Z) :- 
    Y_1 is Y - 1,
    power(X, Y_1, Z_1), 
    Z is Z_1 * X.
    
%11. Write a predicate count_vowels/2 which takes a list as its first argument and returns an integer number (as its second argument) which consists of the count of elements of the input list which area vowel (we assume that the input list only contains vowels and consonants).

vowel(a).
vowel(e).
vowel(i).
vowel(o).
vowel(u).

count_vowels([],0).

count_vowels([X|Y], R):-
    vowel(X),
    count_vowels(Y, R_1),
    R is R_1+1.

count_vowels([_|Y], R):-
    count_vowels(Y, R).
    
%12. Write a predicate vowels/2 which takes a list as its first argument and returnsa list (as its second argument) which consists of the elements of the input list which area vowel (we assume that the input list only contains vowels and consonants).

vowel(a).
vowel(e).
vowel(i).
vowel(o).
vowel(u).

vowels([],[])

vowels([X],[X]):-
    vowel(X).

vowels([X|Y],Z):-
    vowel(X),
	vowels(Y,Z_1),
	Z = [X|Z_1].

vowels([_|Y],Z):-
    vowels(Y,Z).

% 16. Define sum/2 to take a list of integers as input and return the output as their sum.

sum([], 0).

sum([First|Last], R) :- 
    sum(Last, N), 
    R is N + First.
