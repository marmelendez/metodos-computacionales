% 3. Write a predicate head/2 which takes a list as its first argument andreturns the head of the list as its second argument. It should fail ifthere is no first element.

head([],_):-
    fail.

head([First|_], R):-
    R is First.
   
% 8. Write a predicate fib/2which takes a natural number as first argument, and returns the value of the Fibonacci sequence for that position (counting from 1).

fib(0, 0).
fib(1, 1).
fib(2, 1).

fib(F,R) :- 
    F1 is F - 1, 
    F2 is F - 2,
    fib(F1, R1), 
    fib(F2, R2),
    R is R1 + R2.
    
% 9. Write a predicate length2/2 which takes a list as first argument, and returns in the second one the number of elements in the list.

length2([], 0).
length2([_|List], R) :- 
    length2(List, L), 
    R is L + 1.
    
%10. Write a predicate power/3 which takes a number as first argument, a natural number as second argument and returns the first number to the power of the second.

power(0, 0, _):-
    print(error),
	fail.

power(X, 0, 1):-
    X =\= 0.

power(X, Y, Z):-
    Y >= 2, 
    Y_1 is Y - 1,
    power(X, Y_1, Z_1),
    Z is X * Z_1.
